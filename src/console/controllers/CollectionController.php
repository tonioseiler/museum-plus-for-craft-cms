<?php
/**
 * MuseumPlus for CraftCMS plugin for Craft CMS 3.x
 *
 * Allows to import MuseumsPlus Collection data to Craft CMS and publish data. Additioanl Web Specific Data can be added to the imported data.
 *
 * @link      https://furbo.ch
 * @copyright Copyright (c) 2022 Furbo GmbH
 */

namespace furbo\museumplusforcraftcms\console\controllers;

use craft\elements\Asset;
use craft\helpers\Assets;
use craft\helpers\FileHelper;
use craft\models\VolumeFolder;
use craft\helpers\App;

use craft\queue\jobs\ResaveElements;
use craft\queue\jobs\UpdateSearchIndex;
use furbo\museumplusforcraftcms\elements\MuseumPlusVocabulary;
use furbo\museumplusforcraftcms\MuseumPlusForCraftCms;
use furbo\museumplusforcraftcms\elements\MuseumPlusItem;
use furbo\museumplusforcraftcms\records\ObjectGroupRecord;
use furbo\museumplusforcraftcms\records\PersonRecord;
use furbo\museumplusforcraftcms\records\OwnershipRecord;
use furbo\museumplusforcraftcms\records\LiteratureRecord;
use furbo\museumplusforcraftcms\events\ItemUpdatedFromMuseumPlusEvent;

use craft\queue\Queue;
use furbo\museumplusforcraftcms\jobs\UpdateItemJob;
use furbo\museumplusforcraftcms\jobs\DeleteRemovedItemsJob;
use furbo\museumplusforcraftcms\jobs\UpdateItemParentChildRelationsJob;

use Craft;
use furbo\museumplusforcraftcms\records\MuseumPlusItemRecord;
use yii\console\Controller;
use yii\console\ExitCode;
use yii\helpers\Console;

/**
 * Collection Command
 *
 * The first line of this class docblock is displayed as the description
 * of the Console Command in ./craft help
 *
 * Craft can be invoked via commandline console by using the `./craft` command
 * from the project root.
 *
 * Console Commands are just controllers that are invoked to handle console
 * actions. The segment routing is plugin-name/controller-name/action-name
 *
 * The actionIndex() method is what is executed if no sub-commands are supplied, e.g.:
 *
 * ./craft museum-plus-for-craft-cms/collection
 *
 * Actions must be in 'kebab-case' so actionDoSomething() maps to 'do-something',
 * and would be invoked via:
 *
 * ./craft museum-plus-for-craft-cms/collection/do-something
 *
 * @author    Furbo GmbH
 * @package   MuseumPlusForCraftCms
 * @since     1.0.0
 */
class CollectionController extends Controller
{
    /**
     * @var bool|null if true - script will download all data.
     */
    public $forceAll;

    /**
     * @var int|null if set, script will downoad only this item.
     */
    public $collectionItemId;

    /**
     * @var bool|null if true - script will not download attachments.
     */
    public $ignoreAttachments;

    /**
     * @var bool|null if true - script will not download multimedia.
     */
    public $ignoreMultimedia;

    /**
     * @var bool|null if true - script will not download literature.
     */
    public $ignoreLiterature;

    /**
     * @var int startId - skip all items with id before this
     */
    public $startId;

    // Private Properties
    private $start;
    private $settings;
    private $museumPlus;
    public $assets;


    // Public Methods
    // =========================================================================

    public function __construct($id, $module, $config = [])
    {
        parent::__construct($id, $module, $config);
        $this->settings = MuseumPlusForCraftCms::$plugin->getSettings();
        $this->museumPlus = MuseumPlusForCraftCms::$plugin->museumPlus;
        $this->assets = Craft::$app->getAssets();
    }

    public function beforeAction($action)
    {
        App::maxPowerCaptain();
        $this->start = microtime(true);
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        $end = microtime(true);
        $time = $end - $this->start;
        $time = round($time/60, 2);
        echo PHP_EOL;
        echo "Time: " . $time . " min" . PHP_EOL;
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

    public function actionUpdateItem()
    {
        if (empty($this->collectionItemId)) {
            echo 'Missing param: collectionItemId' . PHP_EOL;
            return false;
        }
        $queue = Craft::$app->queue;
        $jobId = $queue->push(new UpdateItemJob([
            'collectionId' => $this->collectionItemId,
        ]));

        echo "Queued update for MuseumPlusItem {$this->collectionItemId}.\n";
        
    }

    public function actionUpdateItems()
    {
        //$this->forceAll = true;

        echo 'Downloading list of object groups'.PHP_EOL;
        $this->downloadObjectGroups();
        echo 'Download finished'.PHP_EOL;
        echo 'Updating Items'.PHP_EOL;
        $objectIds = [];

        $startUpdating = true;
        if (!empty($this->startId)) {
            $startUpdating = false;
        }
        $queue = Craft::$app->queue;
        foreach ($this->settings['objectGroups'] as $objectGroupId) {
            echo 'getObjectsByObjectGroup START'.PHP_EOL;
            $objects = $this->museumPlus->getObjectsByObjectGroup($objectGroupId, ['__id', '__lastModifiedUser', '__lastModified']);
            echo 'getObjectsByObjectGroup END'.PHP_EOL;
            foreach ($objects as $o) {
                $objectIds[$o->id] = $o->id;
                if ($startUpdating) {
                    //check if item exists and if last mod is before last mod in mplus
                    $objectLastModified = new \DateTime($o->__lastModified);
                    $item = MuseumPlusItem::find()
                        ->where(['collectionId' => $o->id])
                        ->one();
                    //$queue = Craft::$app->queue;
                    if (!$item) {
                        $jobId = $queue->push(new UpdateItemJob([
                            'description' => 'Creating item (id: '.$o->id.')',
                            'collectionId' => $o->id,
                            'ignoreAttachments' => $this->ignoreAttachments,
                            'ignoreMultimedia' => $this->ignoreMultimedia,
                            'ignoreLiterature' => $this->ignoreLiterature,
                        ]));
                        echo 'Creating item (id: '.$o->id.')'.PHP_EOL;
                    } else if ($this->forceAll || $item->dateUpdated < $objectLastModified) {
                        $jobId = $queue->push(new UpdateItemJob([
                            'description' => 'Updating item (id: '.$o->id.')',
                            'collectionId' => $o->id,
                            'ignoreAttachments' => $this->ignoreAttachments,
                            'ignoreMultimedia' => $this->ignoreMultimedia,
                            'ignoreLiterature' => $this->ignoreLiterature,
                        ]));
                        // TODO careful: triggerUpdateEvent should be false in this case
                        echo 'Updating item (id: '.$o->id.')'.PHP_EOL;
                    } else {
                        echo 'Skipping Item (id: '.$o->id.')'.PHP_EOL;
                    }
                } else {
                    $startUpdating = $o->id == $this->startId;
                    echo 'skip item '.$o->id.PHP_EOL;
                }
            }
        }

        $this->actionUpdateItemParentChildRelations();
        $this->actionDeleteRemovedItems();
        
        return true;
    }


    public function actionDeleteRemovedItems()
    {
        $queue = Craft::$app->queue;
        echo 'Deleting removed items - job sent to queue'.PHP_EOL;
        $jobId = $queue->push(new DeleteRemovedItemsJob([
            'description' => 'Deleting removed items',
        ]));
        return true;
    }

    public function options($actionID)
    {
        $options = parent::options($actionID);
        $options[] = 'forceAll';
        $options[] = 'collectionItemId';
        $options[] = 'ignoreAttachments';
        $options[] = 'ignoreMultimedia';
        $options[] = 'ignoreLiterature';
        $options[] = 'startId';
        return $options;
    }


    public function actionRemoveAttachments()
    {
        $itemIds = MuseumPlusItem::find()->ids();
        foreach($itemIds as $itemId) {
            $item = MuseumPlusItem::find()
                ->id($itemId)
                ->one();
            if($item->assetId) {
                $asset = Asset::find()->id($item->assetId)->one();
                if ($asset) {
                    $success = Craft::$app->elements->deleteElement($asset);
                    if ($success) {
                        echo "[OK] Id:" . $item->id . " AssetID " . $item->assetId . PHP_EOL;
                    } else {
                        echo "[ERROR] Id:" . $item->id . " AssetID " . $item->assetId . PHP_EOL;
                    }
                }
            }
        }
        return true;
    }

    public function actionUpdateSearchIndex()
    {
        $itemIds = MuseumPlusItem::find()->ids();
        foreach($itemIds as $itemId) {
            Craft::$app->getQueue()->push(new UpdateSearchIndex([
                'elementType' => MuseumPlusItem::class,
                'elementId' => $itemId,
            ]));
        }
    }

    private function downloadObjectGroups() {
        $objectGroupIds = $this->settings['objectGroups'];
        $objectGroupsData = $this->museumPlus->getObjectGroups();
        foreach ($objectGroupsData as $ogd) {
            if (in_array($ogd->id, $objectGroupIds)) {
                $this->createOrUpdateObjectGroup($ogd);
            }
        }

        $existingObjectGroups = ObjectGroupRecord::find()->all();
        foreach ($existingObjectGroups as $objectGroup) {
            if (!in_array($objectGroup->collectionId, $objectGroupIds)) {
                $success = $objectGroup->delete();
                //echo 'x';
            }
        }

        return true;
    }

    private function createOrUpdateObjectGroup($data) {
        $collectionId = $data->id;

        $objectGroup = ObjectGroupRecord::find()
            ->where(['collectionId' => $collectionId])
            ->one();

        if (empty($objectGroup)) {
            //create new
            $objectGroup = new ObjectGroupRecord();
            $objectGroup->id = 0;
            $objectGroup->collectionId = $collectionId;
            $objectGroup->title = $data->OgrNameTxt;
        } else {
            //update
            $objectGroup->title = $data->OgrNameTxt;
        }
        $objectGroup->data = json_encode($data);
        $success = $objectGroup->save();
        return $objectGroup;
    }

    public function actionOptimizeSearchIndex()
    {
        Craft::$app->db->createCommand("OPTIMIZE TABLE searchindex")->execute();
    }

    public function actionUpdateItemParentChildRelations()
    {

        //TODO: trigger job and remove this code

        App::maxPowerCaptain();

        //reset parent ids
        $itemRecords = MuseumPlusItemRecord::find()
            ->where(['>', 'parentId', '0'])
            ->all();
        foreach ($itemRecords as $item) {
            $item->parentId = 0;
            $item->save();
            echo '.';
        }

        //set the relations again
        $itemRecords = MuseumPlusItemRecord::find()->all();
        foreach ($itemRecords as $item) {
            $moduleRefs = $item->getDataAttribute('moduleReferences');
            if (isset($moduleRefs['ObjObjectPartRef'])) {
                $parts = $moduleRefs['ObjObjectPartRef']['items'];
                foreach ($parts as $part) {
                    $child = MuseumPlusItemRecord::find()
                        ->where(['collectionId' => $part['id']])
                        ->one();
                    if ($child) {
                        $child->parentId = $item->collectionId;
                        $child->save();
                        echo 'x';
                    }
                }
                echo '-';
            } else {
                echo '_';
            }
        }
    }

    public function actionTriggerUpdateEvents() {
        $itemIds = MuseumPlusItem::find()->ids();
        foreach($itemIds as $itemId) {
            $item = MuseumPlusItem::find()
                ->id($itemId)
                ->one();
            $this->triggerUpdateEvent($item->collectionId, false);
            echo '.';
        }
        echo "done\n";
    }
}
